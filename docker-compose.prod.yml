name: mrmeet_core_prod

services:
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    expose:
      - "8000"
    environment:
      - ADMIN_API_URL=http://admin-api:8001
      - BOT_MANAGER_URL=http://bot-manager:8080
      - TRANSCRIPTION_COLLECTOR_URL=http://transcription-collector:8000
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    init: true
    depends_on:
      admin-api:
        condition: service_started
      bot-manager:
        condition: service_started
      transcription-collector:
        condition: service_started
    networks:
      - mrmeet_default
      - public
    labels:
      traefik.enable: "true"
      traefik.http.routers.api-gateway.rule: Host(`${NEXT_APP_DOMAIN}`) && PathPrefix(`/api/gateway`)
      traefik.http.routers.api-gateway.entrypoints: websecure
      traefik.http.routers.api-gateway.tls: "true"
      traefik.http.routers.api-gateway.tls.certresolver: le
      traefik.http.routers.api-gateway.middlewares: api-gateway-strip@docker
      traefik.http.middlewares.api-gateway-strip.stripprefix.prefixes: /api/gateway
      traefik.http.services.api-gateway.loadbalancer.server.port: "8000"
      traefik.docker.network: "public"
    restart: unless-stopped

  admin-api:
    build:
      context: .
      dockerfile: services/admin-api/Dockerfile
    expose:
      - "8001"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mrmeet
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - ADMIN_API_TOKEN=${ADMIN_API_TOKEN}
      # Enable automatic DB initialization / migrations inside the container
      - ADMIN_API_AUTO_INIT=1
      # Unified SQLAlchemy/asyncpg style URL (safe defaults if any variable missing)
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-mrmeet}
      # (Optional) Redis URL if admin service needs caching/session (harmless if unused)
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=DEBUG
    init: true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mrmeet_default
      - public
    labels:
      traefik.enable: "true"
      traefik.http.routers.admin-api.rule: Host(`${NEXT_APP_DOMAIN}`) && PathPrefix(`/api/admin`)
      traefik.http.routers.admin-api.entrypoints: websecure
      traefik.http.routers.admin-api.tls: "true"
      traefik.http.routers.admin-api.tls.certresolver: le
      traefik.http.routers.admin-api.middlewares: admin-api-strip@docker
      traefik.http.middlewares.admin-api-strip.stripprefix.prefixes: /api/admin
      traefik.http.services.admin-api.loadbalancer.server.port: "8001"
      traefik.docker.network: "public"
    restart: unless-stopped

  bot-manager:
    build:
      context: .
      dockerfile: services/bot-manager/Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379/0
      - BOT_IMAGE_NAME=${BOT_IMAGE_NAME:-mrmeet-bot:dev}
      - DOCKER_NETWORK=${COMPOSE_PROJECT_NAME:-mrmeet}_mrmeet_default
      - LOG_LEVEL=DEBUG
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mrmeet
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-mrmeet}
      - DOCKER_HOST=unix://var/run/docker.sock
      - DEVICE_TYPE=${DEVICE_TYPE}
      - WHISPER_LIVE_URL=${WHISPER_LIVE_URL:-http://whisperlive:9090}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    init: true
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - mrmeet_default
    restart: unless-stopped

  whisperlive:
    profiles: ["gpu"]
    build:
      context: .
      dockerfile: services/WhisperLive/Dockerfile.project
    volumes:
      - ./hub:/root/.cache/huggingface/hub
      - ./services/WhisperLive/models:/app/models
    environment:
      - REDIS_STREAM_URL=redis://redis:6379/0/transcription_segments
      - TRANSCRIPTION_COLLECTOR_URL=redis://redis:6379/0/transcription_segments
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_STREAM_NAME=transcription_segments
      - LANGUAGE_DETECTION_SEGMENTS=${LANGUAGE_DETECTION_SEGMENTS}
      - DEVICE_TYPE=${DEVICE_TYPE}
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE}
      - WL_MAX_CLIENTS=${WL_MAX_CLIENTS}
      - WL_USE_SPEAKER_GROUND_TRUTH=${WL_USE_SPEAKER_GROUND_TRUTH:-true}
      - WL_SERVER_SPEAKER_NO_TX_STALL_S=${WL_SERVER_SPEAKER_NO_TX_STALL_S:-30}
      - WL_SPEAKER_ACTIVE_WINDOW_S=${WL_SPEAKER_ACTIVE_WINDOW_S:-8}
      - WL_SERVER_WARMUP_S=${WL_SERVER_WARMUP_S:-60}
      - VAD_FILTER_THRESHOLD=${VAD_FILTER_THRESHOLD:-0}
      - CONSUL_ENABLE=${CONSUL_ENABLE:-true}
      - CONSUL_HTTP_ADDR=${CONSUL_HTTP_ADDR:-http://consul:8500}
      - WL_REDIS_DISCOVERY_ENABLED=${WL_REDIS_DISCOVERY_ENABLED:-false}
    command: --port 9090 --backend faster_whisper --faster_whisper_custom_model_path ${WHISPER_MODEL_SIZE}
    expose:
      - "9090"
      - "9091"
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ["0"]
              capabilities: [gpu]
    init: true
    depends_on:
      transcription-collector:
        condition: service_started
    networks:
      - mrmeet_default

  whisperlive-cpu:
    profiles: ["cpu"]
    build:
      context: .
      dockerfile: services/WhisperLive/Dockerfile.cpu
    volumes:
      - ./hub:/root/.cache/huggingface/hub
      - ./services/WhisperLive/models:/app/models
    environment:
      - REDIS_STREAM_URL=redis://redis:6379/0/transcription_segments
      - TRANSCRIPTION_COLLECTOR_URL=redis://redis:6379/0/transcription_segments
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_STREAM_NAME=transcription_segments
      - LANGUAGE_DETECTION_SEGMENTS=${LANGUAGE_DETECTION_SEGMENTS}
      - VAD_FILTER_THRESHOLD=${VAD_FILTER_THRESHOLD}
      - DEVICE_TYPE=cpu
      - WHISPER_MODEL_SIZE=${WHISPER_MODEL_SIZE}
      - WL_MAX_CLIENTS=${WL_MAX_CLIENTS}
    deploy:
      replicas: 2
    command: --port 9090 --backend faster_whisper --faster_whisper_custom_model_path ${WHISPER_MODEL_SIZE}
    expose:
      - "9090"
      - "9091"
    init: true
    depends_on:
      transcription-collector:
        condition: service_started
    networks:
      - mrmeet_default
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  transcription-collector:
    build:
      context: .
      dockerfile: services/transcription-collector/Dockerfile
    ports:
      - "${TRANSCRIPTION_COLLECTOR_HOST_PORT:-8123}:8000"
    volumes:
      - ./alembic.ini:/app/alembic.ini
      - ./libs/shared-models/alembic:/app/alembic
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mrmeet
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME:-mrmeet}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_STREAM_NAME=transcription_segments
      - REDIS_CONSUMER_GROUP=collector_group
      - REDIS_STREAM_READ_COUNT=10
      - REDIS_STREAM_BLOCK_MS=2000
      - BACKGROUND_TASK_INTERVAL=10
      - IMMUTABILITY_THRESHOLD=30
      - REDIS_SEGMENT_TTL=3600
      - REDIS_CLEANUP_THRESHOLD=86400
      - LOG_LEVEL=DEBUG
    init: true
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - mrmeet_default
    restart: unless-stopped

  mcp:
    build:
      context: .
      dockerfile: services/mcp/Dockerfile
    ports:
      - "${MCP_HOST_PORT:-18888}:18888"
    environment:
      - API_GATEWAY_URL=http://api-gateway:8000
      - LOG_LEVEL=DEBUG
    init: true
    depends_on:
      api-gateway:
        condition: service_started
    networks:
      - mrmeet_default
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    command:
      ["redis-server", "--appendonly", "yes", "--appendfsync", "everysec"]
    volumes:
      - ${DATA_ROOT:-/mnt/data}/redis:/data
    networks:
      - mrmeet_default
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mrmeet
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ${DATA_ROOT:-/mnt/data}/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mrmeet"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - mrmeet_default
    restart: unless-stopped

networks:
  mrmeet_default:
    driver: bridge
  public:
    external: true
    name: public
